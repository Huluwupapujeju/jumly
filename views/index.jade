extends layout
block content
  !=css('jumly')
  !=js('jumly')
  .container
    .row
      .span2
      .span8
        h1.logo
          .brand JUMLY
        
        #intro
          p
            | JUMLY is a JavaScript library, UML diagram rendering engine.
            | Using JUMLY, you can easily embed stylish UML diagrams on your HTML document.  
            | You need nothing to use JUMLY except for modern browser.

        #links 
          a.button.download DOWNLOAD v0.1.0
          .buttons
            a.button.github(href='https://github.com/tmtk75/jumly') github
            a.button.apidocs API DOCS
       
        #example1("data-bind"="css:{normal:example1.normal,simple:example1.simple,funcy:example1.funcy}")
          :jumly(type=sequence)
            @found "You", ->
              @message "Think", ->
                @message "Write your idea", "JUMLY", ->
                  @create "Diagram"
          
          :code(type=javascript)
            @found "You", ->
              @message "Think", ->
                @message "Write your idea", "JUMLY", ->
                  @create "Diagram"

          .buttons
            label(for="example1-styles-a")
              a.button("data-bind"="css:{selected:example1.normal}") normal
            label(for="example1-styles-b")
              a.button("data-bind"="css:{selected:example1.simple}") simple
            label(for="example1-styles-c")
              a.button("data-bind"="css:{selected:example1.funcy}") funcy
            input#example1-styles-a(type="radio",name="example1_styles",value="normal","data-bind"="checked:example1.styles",style="display:none")
            input#example1-styles-b(type="radio",name="example1_styles",value="simple","data-bind"="checked:example1.styles",style="display:none")
            input#example1-styles-c(type="radio",name="example1_styles",value="funcy","data-bind"="checked:example1.styles",style="display:none")

        #getting-started
          h2 Getting Started
          p
            | Let's say you already have a document.
            | In case you put a sequence diagram into it, put next four lines in your &lt;head>.

          :code(type=xml)
            &lt;link href='https://jumly.herokuapp.com/release/#{VERSION}/jumly.css' rel='stylesheet'/>
            &lt;script src='http://code.jquery.com/jquery-1.8.2.min.js'>&lt;/script>
            &lt;script src='http://coffeescript.org/extras/coffee-script.js'>&lt;/script>
            &lt;script src='https://jumly.herokuapp.com/release/#{VERSION}/jumly.js'>&lt;/script>

          p
            | Then, put a next &lt;script> element into the place where you want to put at.

          :code(type=xml)
            &lt;script type='text/jumly+sequence'>
            @found "You", ->
              @message "get", "JUMLY"
            &lt;/script>

          p
            | That's all.
            | It's easy, isn't it?

          :jumly(type=sequence)
            @found "You", ->
              @message "get", "JUMLY"

          p
            | You'll get the above one there. To get it, you only write just eight-lines.
            | It's certainly that you can add another or more diagrams.

          p
            | Here is a HTML file for <a href="examples/simple.html">one of simplest examples</a>.
            | Take a look at the source.

        #bg-why.row
          .span4
            h2 These things before?
            dl
              dt To do a lot
              dd
                | Getting many small diagrams which have a few icons and relationships. 
                | Then you launched an UML modeling tool, and create a new project, and make a model, ...
              dt Cannot reuse
              dd Wanted to copy a string, like a class name and something phrase, from UML note icon.
              dt Ugly looks 
              dd
                | There was something you don't like at diagram which application generated.
                | For instance, color, size, line width, font, and so on.
              input#read_more-there_things(type="checkbox","data-bind"="checked:read_more.there_things._visible",style="display:none")
              label(for="read_more-there_things")
                a("data-bind"="text:read_more.there_things.text")
              .more("data-bind"="visible:read_more.there_things._visible")
                dt What changed?
                dd Couldn't understand difference b/w old diagram and updated one.
                dt Cannot view
                dd Couldn't open an application file on other computer you don't usually use.
              
          .span4
            h2 Why you like JUMLY
            dl
              dt Everything is text
              dd
                | Input data is text, and output format is text/html. It's great advantage to proprietary binnary data format,
                | because we can use SCM like Subversion/Mercurial/Git to manage and version the data.
              dt Easy to use
              dd You need only a web browser and a text editor you get used to.
              dt Fast for everything
              dd The time you get a diagram since you want it. The time JUMLY render diagram. The time you know JUMLY.
              input#read_more-why_you_like(type="checkbox","data-bind"="checked:read_more.why_you_like._visible",style="display:none")
              label(for="read_more-why_you_like")
                a More...
              .more("data-bind"="visible:read_more.why_you_like._visible")
                dt High quality
                dd You can get keen designed diagrams, especially on MacOSX
                dt Concentrative
                dd You can concentrate on your modeling regardless of the layout for UML icons.
                dt Based on DOM and jQuery
                dd Diagrams JUMLY renders are composed with DOM/jQuery node, so you've already understand the way to handle them.
                dt Powered by HTML5/CSS3
                dd
                  | In addition the above, you will get HTML5/CSS3 bless.
                  | For example, you can edit the styles of icons applying CSS.
                dt Light and small
                dd
                  | Now the size of script is 56KB, and the size of stylesheet is 16KB.
                  | They are relatively lighter than the UML modeling tools =)

  #example-showcase
    .container
      .row
        .span2
        .span8
          h2 Examples

  #information
    .container
      .row
        .span2
        .span8
          .row
            .span4
              #requirement
                h2 Requirement
                p
                  | JUMLY is tested on <a href='http://jquery.com/'>jQuery</a> 1.7.3
                  | and <a href='http://coffeescript.org/'>CoffeeScript</a> 1.3.3,
                  | and they or later are recommended on you.

            .span4
              #license
                h2 License
                p
                  | JUMLY v0.1.0 is under <a href="http://opensource.org/licenses/MIT">MIT license</a>.<br>
                  | Perhapse, license for newer versions may be changed to another one in the future.
                  | In that case, you can still use old version's JUMLY with MIT license.
          
          footer
            .copyright
              | copyright 2010-#{2012}, all rights reserved Â©Tomotaka Sakuma

  :coffeescript
    model =
      read_more:
        why_you_like: _visible: ko.observable false
        there_things: _visible: ko.observable false
      example1:
        styles: ko.observable "normal"
    
    f = (g)-> ko.dependentObservable -> if g() then "Hide" else "More..."
    model.read_more.why_you_like.text = f model.read_more.why_you_like._visible
    model.read_more.there_things.text = f model.read_more.there_things._visible
    model.example1.normal = ko.dependentObservable -> model.example1.styles() is 'normal'
    model.example1.simple = ko.dependentObservable -> model.example1.styles() is 'simple'
    model.example1.funcy = ko.dependentObservable -> model.example1.styles() is 'funcy'

    ko.applyBindings model, document.body

