extends column2

block styles
 link(rel='stylesheet', href="reference.css")

block left-header
  h1.logo
    a(href="/") JUMLY

block right-header

block left-content
  .menu
    ul
      li Directives
        ul
          li
            a(href="#_found") @found
          li
            a(href="#_message") @message
          li
            a(href="#_create") @create
          li
            a(href="#_reply") @reply
          li
            a(href="#_alt") @alt
          li
            a(href="#_loop") @loop
          li
            a(href="#_ref") @ref
          li
            a(href="#_note") @note

block right-content
  #directives
    h2 Directives

    - event = "event:{mouseover:focused,mouseout:unfocused}"
    - f = function(name) {return "css:{hilighted:" + name + "()}," + event}

    section#_found
      
      h3 @found
      
      p  is the top level element to start interactions.
        |It puts an
        strong("data-key"='object',"data-bind"="#{f('object')}")
          &nbsp;new object&nbsp;
        |with a lifeline which is dashed line
        |and a
        strong("data-key"='occurrence',"data-bind"="#{f('occurrence')}")
          &nbsp;new occurrence&nbsp;
        |which has gray-border rectangle.
      
      :code(type=javascript)
        @found "He"
      
      :jumly
        @found "He"
        he.attr "data-key":"object","data-bind":"#{f('object') }"
        @find(".occurrence").attr "data-key":"occurrence","data-bind":"#{f('occurrence')}"
        $("body").on "ran.jumly", ->
          foundModel =
            object: ko.observable false
            occurrence: ko.observable false
          $.extend foundModel, document.jumly.hilightedModel
          ko.applyBindings foundModel, _found

      p  You can put a <code>-></code> to show some interations for the occurrence.
        |Make an indent (two spaces are better), and write other directives
        |like <code><a href="#_message">@message</a></code>.
      
      :code(type=javascript)
        @found "He", ->
          @message "calls", "Her" 
    
    section#_message
      h3 @message

      p is an interaction between two objects or self-invoking.

      p The following shows an
        strong("data-key"='interaction',"data-bind"="#{f('interaction')}")
          &nbsp;interaction&nbsp;
        |from "He" to "Her" and the name is "calls".

      :code(type=javascript)
        @found "He", ->
          @message "calls", "Her"

      :jumly
        @found "He", ->
          @message "calls", "Her"
        @find(".interaction").attr "data-key":"interaction","data-bind":"#{f('interaction')}"
        $("body").on "ran.jumly", ->
          messageModel =
            interaction: ko.observable false
          $.extend messageModel, document.jumly.hilightedModel
          ko.applyBindings messageModel, _message

      p If second argument is not given, it shows self-invoking.
      
      :code(type=javascript)
        @found "He", ->
          @message "thinks"
      
      :jumly
        @found "He", ->
          @message "thinks"

      p You can put a <code>-></code> in both cases after the last argument for nested interaction.
      :code(type=javascript)
        @found "He", ->
          @message "calls", "Her", ->
            @message "tells mail", "He", ->
              @message "remembering", ->
                @message "mails", "Her"
      :jumly
        @found "He", ->
          @message "calls", "Her", ->
            @message "tells mail", "He", ->
              @message "remembering", ->
                @message "mails", "Her"
        @find(".occurrence").addClass "compact"



    section#_create
      h3 @create
      p  is a kind of interaction which takes one argument which is a name for new object.
        |The new object created by <code>@create</code> shifts downward, and the arrow looks
        |dashed line.

      :code(type=javascript)
        @found "He", ->
          @create "Contact"
      :jumly
        @found "He", ->
          @create "Contact"

      p <code>@create</code> can optionally take <code>-></code>
        |at second argument as <code>@message</code> and has some directives.
      
      :code(type=javascript)
        @found "She", ->
          @create "Dinner", ->
            @message "smells", "She"
      :jumly
        @found "She", ->
          @create "Dinner", ->
            @message "smells", "She"
        @find(".occurrence").addClass "compact"


    #_reply
      h3 @reply
    #_alt
      h3 @alt
    #_loop
      h3 @loop
    #_ref
      h3 @ref
    #_note
      h3 @note

    :coffeescript
      document.jumly = {}
      document.jumly.hilightedModel =
        focused: (vm, e)-> vm[$(e.currentTarget).data "key"] true
        unfocused: (vm, e)-> vm[$(e.currentTarget).data "key"] false
