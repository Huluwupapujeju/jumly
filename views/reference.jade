extends column2

block styles
 link(rel='stylesheet', href="reference.css")

block left-header
  h1.logo
    a(href="/") JUMLY

block right-header

block left-content
  .menu
    ul
      li Directives
        ul
          li
            a(href="#_found") @found
          li
            a(href="#_message") @message
          li
            a(href="#_create") @create
          li
            a(href="#_reply") @reply
          li
            a(href="#_alt") @alt
          li
            a(href="#_loop") @loop
          li
            a(href="#_ref") @ref
          li
            a(href="#_note") @note

block right-content
  #directives
    h2 Directives

    section#_found
      
      h3 @found
      
      p is the top level element to start interactions.
        |It puts an
        strong
          &nbsp;new object&nbsp;
        |with a lifeline which is dashed line
        |and a
        strong
          &nbsp;new occurrence&nbsp;
        |which has gray-border rectangle.
      
      :code(type=javascript)
        @found "He"
      
      :jumly
        @found "He"

      p You can put a <code>-></code> to show some interations for the occurrence.
        |Make an indent (two spaces are better), and write other directives
        |like <code><a href="#_message">@message</a></code>.
      
      :code(type=javascript)
        @found "He", ->
          @message "calls", "Her" 
    
    section#_message
      h3 @message

      p is an interaction between two objects or self-invoking.

      p The following shows an
        strong
          &nbsp;interaction&nbsp;
        |from "He" to "Her" and the name is "calls".

      :code(type=javascript)
        @found "He", ->
          @message "calls", "Her"

      :jumly
        @found "He", ->
          @message "calls", "Her"

      p If second argument is not given, it shows self-invoking.
      
      :code(type=javascript)
        @found "He", ->
          @message "thinks"
      
      :jumly
        @found "He", ->
          @message "thinks"

      p You can put a <code>-></code> in both cases after the last argument for nested interaction.

      :code(type=javascript)
        @found "He", ->
          @message "calls", "Her", ->
            @message "tells mail", "He", ->
              @message "remembering", ->
                @message "mails", "Her"
      :jumly
        @found "He", ->
          @message "calls", "Her", ->
            @message "tells mail", "He", ->
              @message "remembering", ->
                @message "mails", "Her"
        @find(".occurrence").addClass "compact"



    section#_create
      h3 @create
      p is a kind of interaction which takes one argument which is a name for new object.
        |The new object created by <code>@create</code> shifts downward, and the arrow looks
        |dashed line.

      :code(type=javascript)
        @found "He", ->
          @create "Contact"
      :jumly
        @found "He", ->
          @create "Contact"

      p <code>@create</code> can optionally take <code>-></code>
        |at second argument as <code>@message</code> and has some directives.
      
      :code(type=javascript)
        @found "She", ->
          @create "Dinner", ->
            @message "smells", "She"
      :jumly
        @found "She", ->
          @create "Dinner", ->
            @message "smells", "She"
        @find(".occurrence").addClass "compact"



    section#_reply
      h3 @reply
      p is a directive to show a return-back message.
        |This can be put in a <code>@message</code> with an argument for a short description.
        |The return-message has a stereotype «return» and the description.

      :code(type=javascript)
        @found "Browser", ->
          @message "GET", "Server", ->
            @reply "200"

      :jumly
        @found "Browser", ->
          @message "GET", "Server", ->
            @reply "200"



    section#_alt
      h3 @alt
      p is a kind of fragment to make usually two or more conditional
        |parts including some interactions. One of part of <code>@alt</code>
        |consists of a pair of a text and <code>-></code>.
        |You can put several pairs in <code>@alt</code>.
        |It has an
        strong alt
        |tag and each condition's name, and also each part is divided with a dashed line.

      :code(type=javascript)
        @found "You", ->
          @alt
            "[have money]": ->
              @message "go to", "BookStore"
            "[have a card]": ->
              @message "go to", "Restaurant"
            "[have nothing]": ->
              @message "go back", "Home"
      :jumly
        @found "You", ->
          @alt
            "[have money]": ->
              @message "go to", "BookStore"
            "[have a card]": ->
              @message "go to", "Restaurant"
            "[have nothing]": ->
              @message "go back", "Home"

      p In each part, nested-interaction is certainly able to be used.
      :code(type=javascript)
        @found "You", ->
          @alt
            "[male]": ->
              @message "pay with a card", "Bar", ->
                @message "auth the card", "Visa"
            "[female]": ->
              @message "wait for his payment"
      :jumly
        @found "You", ->
          @alt
            "[male]": ->
              @message "pay with a card", "Bar", ->
                @message "auth the card", "Visa"
            "[female]": ->
              @message "wait for his payment"

    #_loop
      h3 @loop
      p is a kind of fragment to show a loop. It shows 

      :code(type=javascript)
        @found "You", ->
          @loop ->
              @message ""
      :jumly
        @found "You", ->
          @loop  ->
            @message "wait for his payment"

    #_ref
      h3 @ref
    #_note
      h3 @note
