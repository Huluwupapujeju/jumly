!!! 5
%html
  %head
    %title Try JUMLY
    = haml :"_head.html"
    = haml :"_bootstrap.html"
    :css
      textarea {width:100%; font-family:Monaco,'Courier New';font-size:9pt;}
      #link-to-show .short, #link-to-show .long {white-space:pre-wrap;word-wrap:break-word;}
      .alert-message {width:100%;bottom:0px;position:fixed;margin:0px;}
  %body
    .topbar
      .topbar-inner
        .container-fluid
          %h3 <a href="/#">JUMLY</a>
          %ul <li><a id="sample-1" data-bind="click:sampleRequired">Sample-1</a></li>
          %ul <li><a id="sample-2" data-bind="click:sampleRequired">Sample-2</a></li>
          %ul <li><a href="/Reference.html">Reference</a></li>
    .container-fluid
      .page-header
        %h1 Try JUMLY <small>Sequence Diagram</small>
      .row
        .span6.columns
          %textarea{"data-bind"=>"value:targetJumlipt,valueUpdate:'afterkeydown'",rows:20,placeholder:"Put directives"}
          %a.btn{"data-controls-modal"=>"link-to-show"} Show Link
        #diagram-container.span10.columns{"data-bind"=>"jumly:diagram,after:1234"}

    .alert-message.block-message.error.hide
      %h3.title Error
      %strong type:
      %span.constructor
      %strong message:
      %span.message
      %strong arguments:
      %span.arguments

    .alert-message.block-message.success.hide
      %h3.title Success
      Rendering was succeeded, and stored into localStorage.
    
    #link-to-show.modal.hide
      .modal-header
        %h2 Link To Share
      .modal-body
        %h3 Short Link
        .short
        %h3 Raw Link
        .long
      .modal-footer
        %a#close-link-to-show.btn Close
        :coffeescript
          $ ->
            $("#close-link-to-show").click -> $("#link-to-show").modal('hide')
          

  %script{src:"#{$js_dir}/base64.js"}
  %script{src:"#{$js_dir}/knockout.js"}
  %script{src:"#{$js_dir}/TryJUMLY.js"}

  :coffeescript
    alertError = (ex)->
      a = $(".alert-message").hide().filter(".error")
      for p of ex
        s = switch typeof ex[p]
             when "object", "function" then ex[p].name
             else ex[p]
        a.find(".\#{p}").html("\#{s}")
      a.show()

    storage = window.localStorage
    storeKey = "TryJUMLY.sequence"
    textarea = $ "textarea"
    
    ## Initially restored script
    qp = {}
    qp[e[0]] = e[1] for e in (e.split("=") for e in location.search.replace(/^\?/, "").split("&"))
    if qp.b
      d = Base64.decode qp.b
    else
      d = storage.getItem storeKey
    
    viewModel =
      targetJumlipt: ko.observable d
      sampleRequired: (e, a, b)->
        textarea.val JUMLY.TryJUMLY.samples[e.target.id]
        updatediagram true
        
    $(".alert-message").on "show", (e)->
      setTimeout (-> $(e.target).fadeOut('fast')), 1500

    ko.bindingHandlers.jumly =
      init: (element, valueAccessor, allBindingsAccessor, viewModel)->
      update: (element, valueAccessor, allBindingsAccessor, viewModel)->
        arg = ko.utils.unwrapObservable valueAccessor()
        try
          $(element).html arg
          throw arg unless arg.compose?
          arg.compose()
          $(".alert-message").hide().filter(".success").show().trigger "show"
        catch ex
          console.error ex
          alertError ex
          
    class JUMLYError extends Error
      constructor: (@message, @cause, @jumlipt)->
    JUMLY.Error = JUMLYError
          
    viewModel.diagram = ko.dependentObservable ->
      jumlipt = viewModel.targetJumlipt()
      try
        (new JUMLY.SequenceDiagramBuilder).build jumlipt
      catch ex
        new JUMLY.Error "Failed to build", ex, jumlipt
    
    $ ->
      textarea.focus()
      ko.applyBindings viewModel, $("body")[0]

      $("#link-to-show").modal(backdrop:"static",keyboard:true).bind "show", ->
        d = Base64.encode textarea.val()
        link = "/Share?b=\#{d}"
        longUrl = "\#{location.origin}/\#{link}"
        modal = $(this)
        
        modal.find(".long").html "<a href='\#{link}'>\#{link}</a>"
        bitly = "http://api.bit.ly/shorten?version=2.0.1&login=tmtk75&apiKey=R_39bc09b13aac4481bc526f946f7d1538&longUrl=\#{encodeURIComponent longUrl}&callback=?"
        $.getJSON bitly, (res)->
          shortUrl = res.results[longUrl].shortUrl
          modal.find(".short").html "<a href='\#{shortUrl}' target='shortUrl'>\#{shortUrl}</a>"
